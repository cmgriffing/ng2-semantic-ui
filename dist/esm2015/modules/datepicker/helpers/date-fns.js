import { format, parse } from "date-fns";
import * as defaultLocale from "date-fns/locale/en-US";
function buildLocalizeFn(values, defaultType, indexCallback) {
    return (dirtyIndex, { type } = { type: defaultType }) => {
        const index = indexCallback ? indexCallback(dirtyIndex) : dirtyIndex;
        /* There might be a better way to fix this error:
        ----
        src/modules/datepicker/helpers/date-fns.ts:43:23 - error TS2538: Type 'undefined' cannot be used as an index type.

        43         return values[type][index];
        ----
            However, this '|| 1' coercion "works"
        */
        return values[type || -1][index];
    };
}
function buildLocalizeArrayFn(values, defaultType) {
    return ({ type } = { type: defaultType }) => values[type || -1];
}
function buildMatchFn(patterns, defaultType) {
    return (dirtyString, { type } = { type: defaultType }) => dirtyString.match(`^(${patterns[type || -1].join("|")})`);
}
function buildParseFn(patterns, defaultType) {
    return ([, result], { type } = { type: defaultType }) => (patterns[type || -1] || patterns[defaultType])
        .map((p) => new RegExp(`^${p}`))
        .findIndex((pattern) => pattern.test(result));
}
export class DateFnsParser {
    get _config() {
        return {
            weekStartsOn: this._weekStartsOn,
            locale: this._locale
        };
    }
    constructor(locale) {
        this._weekStartsOn = locale.firstDayOfWeek;
        const weekdayValues = {
            long: locale.weekdays,
            short: locale.weekdaysShort,
            narrow: locale.weekdaysNarrow
        };
        const monthValues = {
            long: locale.months,
            short: locale.monthsShort
        };
        const timeOfDayValues = {
            long: locale.timesOfDay,
            uppercase: locale.timesOfDayUppercase,
            lowercase: locale.timesOfDayLowercase
        };
        const timeOfDayMatchValues = {
            long: locale.timesOfDay,
            short: locale.timesOfDayUppercase.concat(locale.timesOfDayLowercase)
        };
        this._locale = defaultLocale;
        this._locale.localize = Object.assign({}, this._locale.localize, {
            weekday: buildLocalizeFn(weekdayValues, "long"),
            weekdays: buildLocalizeArrayFn(weekdayValues, "long"),
            month: buildLocalizeFn(monthValues, "long"),
            months: buildLocalizeArrayFn(monthValues, "long"),
            timeOfDay: buildLocalizeFn(timeOfDayValues, "long", (hours) => {
                return hours / 12 >= 1 ? 1 : 0;
            }),
            timesOfDay: buildLocalizeArrayFn(timeOfDayValues, "long")
        });
        this._locale.match = Object.assign({}, this._locale.match, {
            weekdays: buildMatchFn(weekdayValues, "long"),
            weekday: buildParseFn(weekdayValues, "long"),
            months: buildMatchFn(monthValues, "long"),
            month: buildParseFn(monthValues, "long"),
            timesOfDay: buildMatchFn(timeOfDayMatchValues, "long"),
            timeOfDay: buildParseFn(timeOfDayMatchValues, "long")
        });
    }
    format(d, f) {
        return format(d, f, this._config);
    }
    parse(dS, f, bD) {
        return parse(dS, f, bD, this._config);
    }
}
//# sourceMappingURL=data:application/json;base64,