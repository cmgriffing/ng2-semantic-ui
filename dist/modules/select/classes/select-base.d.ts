import { ElementRef, QueryList, AfterContentInit, TemplateRef, ViewContainerRef, EventEmitter, OnDestroy, Renderer2 } from "@angular/core";
import { SuiSelectOption } from "../components/select-option";
import { SuiSelectSearch } from "../directives/select-search";
import { DropdownService } from "../../../modules/dropdown/services/dropdown.service";
import { SuiDropdownMenu } from "../../../modules/dropdown/directives/dropdown-menu";
import { SearchService } from "../../../modules/search/services/search.service";
import { HandledEvent, ITemplateRefContext } from "../../../misc/util/helpers/util";
import { ISelectLocaleValues, RecursivePartial } from "../../../behaviors/localization/interfaces/values";
import { SuiLocalizationService } from "../../../behaviors/localization/services/localization.service";
import { FilterFn, LookupFn } from "../../../modules/search/helpers/lookup-fn";
import { IFocusEvent } from "../../../misc/util/helpers/focus-event";
export interface IOptionContext<T> extends ITemplateRefContext<T> {
    query?: string;
}
export declare abstract class SuiSelectBase<T, U> implements AfterContentInit, OnDestroy {
    private _element;
    protected _renderer: Renderer2;
    protected _localizationService: SuiLocalizationService;
    dropdownService: DropdownService;
    searchService: SearchService<T, U>;
    protected _menu: SuiDropdownMenu;
    protected _renderedOptions: QueryList<SuiSelectOption<T>>;
    private _renderedSubscriptions;
    selectClasses: boolean;
    readonly isActive: boolean;
    readonly isVisible: boolean;
    isSearchable: boolean;
    isSearchExternal: boolean;
    readonly searchClass: boolean;
    readonly isSearching: boolean;
    internalSearch?: SuiSelectSearch;
    manualSearch?: SuiSelectSearch;
    readonly searchInput: SuiSelectSearch | undefined;
    tabIndex?: number;
    readonly tabIndexBinding: number;
    isDisabled: boolean;
    options: T[];
    optionsFilter: FilterFn<T> | undefined;
    optionsLookup: LookupFn<T, U> | undefined;
    readonly filteredOptions: T[];
    readonly availableOptions: T[];
    query: string | undefined;
    labelField: string | undefined;
    readonly labelGetter: (obj: T) => string;
    valueField: string;
    readonly valueGetter: (obj: T) => U;
    optionTemplate: TemplateRef<IOptionContext<T>>;
    private _optionFormatter?;
    readonly configuredFormatter: (option: T) => string;
    optionFormatter: ((option: T, query?: string) => string) | undefined;
    private _localeValues;
    localeOverrides: RecursivePartial<ISelectLocaleValues>;
    readonly localeValues: ISelectLocaleValues;
    icon: string;
    transition: string;
    transitionDuration: number;
    onTouched: EventEmitter<void>;
    private _documentKeyDownListener;
    constructor(_element: ElementRef, _renderer: Renderer2, _localizationService: SuiLocalizationService);
    ngAfterContentInit(): void;
    private onLocaleUpdate;
    protected optionsUpdateHook(): void;
    protected queryUpdateHook(): void;
    protected updateQuery(query: string): void;
    protected resetQuery(delayed?: boolean): void;
    protected onAvailableOptionsRendered(): void;
    protected initialiseRenderedOption(option: SuiSelectOption<T>): void;
    abstract selectOption(option: T): void;
    protected findOption(options: T[], value: U): T | undefined;
    onCaretClick(e: HandledEvent): void;
    onClick(e: HandledEvent): void;
    onFocusIn(): void;
    onFocusOut(e: IFocusEvent): void;
    onKeyPress(e: KeyboardEvent): void;
    onDocumentKeyDown(e: KeyboardEvent): void;
    onQueryInputKeydown(event: KeyboardEvent): void;
    protected focus(): void;
    protected drawTemplate(siblingRef: ViewContainerRef, value: T): void;
    ngOnDestroy(): void;
}
