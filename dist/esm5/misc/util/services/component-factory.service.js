import * as tslib_1 from "tslib";
import { Injectable, ApplicationRef, ComponentFactoryResolver, Injector, ComponentRef, ReflectiveInjector, Provider, Type, ViewContainerRef, TemplateRef } from "@angular/core";
var SuiComponentFactory = /** @class */ (function () {
    function SuiComponentFactory(_applicationRef, _componentFactoryResolver, _injector) {
        this._applicationRef = _applicationRef;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._injector = _injector;
    }
    SuiComponentFactory.prototype.createComponent = function (type, providers) {
        if (providers === void 0) { providers = []; }
        // Resolve a factory for creating components of type `type`.
        var factory = this._componentFactoryResolver.resolveComponentFactory(type);
        // Resolve and create an injector with the specified providers.
        var injector = ReflectiveInjector.resolveAndCreate(providers, this._injector);
        // Create a component using the previously resolved factory & injector.
        var componentRef = factory.create(injector);
        return componentRef;
    };
    SuiComponentFactory.prototype.createView = function (viewContainer, template, context) {
        viewContainer.createEmbeddedView(template, context);
    };
    // Inserts the component into the specified view container.
    SuiComponentFactory.prototype.attachToView = function (componentRef, viewContainer) {
        viewContainer.insert(componentRef.hostView, 0);
    };
    // Inserts the component in the root application node.
    SuiComponentFactory.prototype.attachToApplication = function (componentRef) {
        this._applicationRef.attachView(componentRef.hostView);
    };
    // Detaches the component from the root application node.
    SuiComponentFactory.prototype.detachFromApplication = function (componentRef) {
        this._applicationRef.detachView(componentRef.hostView);
    };
    // Moves the component to the specified DOM element.
    SuiComponentFactory.prototype.moveToElement = function (componentRef, element) {
        element.appendChild(componentRef.location.nativeElement);
    };
    // Moves the component to the document body.
    SuiComponentFactory.prototype.moveToDocumentBody = function (componentRef) {
        this.moveToElement(componentRef, document.querySelector("body"));
    };
    SuiComponentFactory.prototype.detachFromDocument = function (componentRef) {
        var element = componentRef.location.nativeElement;
        // We can't use `element.remove()` due to lack of IE11 support.
        if (element.parentNode) {
            element.parentNode.removeChild(element);
        }
    };
    SuiComponentFactory.ctorParameters = function () { return [
        { type: ApplicationRef },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    SuiComponentFactory = tslib_1.__decorate([
        Injectable()
    ], SuiComponentFactory);
    return SuiComponentFactory;
}());
export { SuiComponentFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWZhY3Rvcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1zZW1hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1pc2MvdXRpbC9zZXJ2aWNlcy9jb21wb25lbnQtZmFjdG9yeS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsVUFBVSxFQUFFLGNBQWMsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUM1RSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFDcEUsTUFBTSxlQUFlLENBQUM7QUFPdkI7SUFDSSw2QkFBb0IsZUFBOEIsRUFDOUIseUJBQWtELEVBQ2xELFNBQWtCO1FBRmxCLG9CQUFlLEdBQWYsZUFBZSxDQUFlO1FBQzlCLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBeUI7UUFDbEQsY0FBUyxHQUFULFNBQVMsQ0FBUztJQUFHLENBQUM7SUFFbkMsNkNBQWUsR0FBdEIsVUFBMEIsSUFBWSxFQUFFLFNBQXlCO1FBQXpCLDBCQUFBLEVBQUEsY0FBeUI7UUFDN0QsNERBQTREO1FBQzVELElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFlLENBQUMsQ0FBQztRQUV4RiwrREFBK0Q7UUFDL0QsSUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsZ0JBQWdCLENBQ2hELFNBQVMsRUFDVCxJQUFJLENBQUMsU0FBUyxDQUNqQixDQUFDO1FBRUYsdUVBQXVFO1FBQ3ZFLElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFOUMsT0FBTyxZQUFZLENBQUM7SUFDeEIsQ0FBQztJQUVNLHdDQUFVLEdBQWpCLFVBQW9ELGFBQThCLEVBQUUsUUFBdUIsRUFBRSxPQUFTO1FBQ2xILGFBQWEsQ0FBQyxrQkFBa0IsQ0FBSSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELDJEQUEyRDtJQUNwRCwwQ0FBWSxHQUFuQixVQUF1QixZQUE0QixFQUFFLGFBQThCO1FBQy9FLGFBQWEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsc0RBQXNEO0lBQy9DLGlEQUFtQixHQUExQixVQUE4QixZQUE0QjtRQUN0RCxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELHlEQUF5RDtJQUNsRCxtREFBcUIsR0FBNUIsVUFBZ0MsWUFBNEI7UUFDeEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxvREFBb0Q7SUFDN0MsMkNBQWEsR0FBcEIsVUFBd0IsWUFBNEIsRUFBRSxPQUFlO1FBQ2pFLE9BQU8sQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsNENBQTRDO0lBQ3JDLGdEQUFrQixHQUF6QixVQUE2QixZQUE0QjtRQUNyRCxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVNLGdEQUFrQixHQUF6QixVQUE2QixZQUE0QjtRQUNyRCxJQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQXdCLENBQUM7UUFDL0QsK0RBQStEO1FBQy9ELElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUNwQixPQUFPLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMzQztJQUNMLENBQUM7O2dCQXZEbUMsY0FBYztnQkFDSix3QkFBd0I7Z0JBQ3hDLFFBQVE7O0lBSDdCLG1CQUFtQjtRQUQvQixVQUFVLEVBQUU7T0FDQSxtQkFBbUIsQ0F5RC9CO0lBQUQsMEJBQUM7Q0FBQSxBQXpERCxJQXlEQztTQXpEWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIEluamVjdGFibGUsIEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yLCBDb21wb25lbnRSZWYsXG4gICAgUmVmbGVjdGl2ZUluamVjdG9yLCBQcm92aWRlciwgVHlwZSwgVmlld0NvbnRhaW5lclJlZiwgVGVtcGxhdGVSZWZcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBJSW1wbGljaXRDb250ZXh0PFQ+IHtcbiAgICAkaW1wbGljaXQ/OlQ7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdWlDb21wb25lbnRGYWN0b3J5IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9hcHBsaWNhdGlvblJlZjpBcHBsaWNhdGlvblJlZixcbiAgICAgICAgICAgICAgICBwcml2YXRlIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6Q29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICAgICAgICAgIHByaXZhdGUgX2luamVjdG9yOkluamVjdG9yKSB7fVxuXG4gICAgcHVibGljIGNyZWF0ZUNvbXBvbmVudDxUPih0eXBlOlR5cGU8VD4sIHByb3ZpZGVyczpQcm92aWRlcltdID0gW10pOkNvbXBvbmVudFJlZjxUPiB7XG4gICAgICAgIC8vIFJlc29sdmUgYSBmYWN0b3J5IGZvciBjcmVhdGluZyBjb21wb25lbnRzIG9mIHR5cGUgYHR5cGVgLlxuICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5fY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHR5cGUgYXMgVHlwZTxUPik7XG5cbiAgICAgICAgLy8gUmVzb2x2ZSBhbmQgY3JlYXRlIGFuIGluamVjdG9yIHdpdGggdGhlIHNwZWNpZmllZCBwcm92aWRlcnMuXG4gICAgICAgIGNvbnN0IGluamVjdG9yID0gUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoXG4gICAgICAgICAgICBwcm92aWRlcnMsXG4gICAgICAgICAgICB0aGlzLl9pbmplY3RvclxuICAgICAgICApO1xuXG4gICAgICAgIC8vIENyZWF0ZSBhIGNvbXBvbmVudCB1c2luZyB0aGUgcHJldmlvdXNseSByZXNvbHZlZCBmYWN0b3J5ICYgaW5qZWN0b3IuXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGZhY3RvcnkuY3JlYXRlKGluamVjdG9yKTtcblxuICAgICAgICByZXR1cm4gY29tcG9uZW50UmVmO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVWaWV3PFQsIFUgZXh0ZW5kcyBJSW1wbGljaXRDb250ZXh0PFQ+Pih2aWV3Q29udGFpbmVyOlZpZXdDb250YWluZXJSZWYsIHRlbXBsYXRlOlRlbXBsYXRlUmVmPFU+LCBjb250ZXh0OlUpOnZvaWQge1xuICAgICAgICB2aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldzxVPih0ZW1wbGF0ZSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0cyB0aGUgY29tcG9uZW50IGludG8gdGhlIHNwZWNpZmllZCB2aWV3IGNvbnRhaW5lci5cbiAgICBwdWJsaWMgYXR0YWNoVG9WaWV3PFQ+KGNvbXBvbmVudFJlZjpDb21wb25lbnRSZWY8VD4sIHZpZXdDb250YWluZXI6Vmlld0NvbnRhaW5lclJlZik6dm9pZCB7XG4gICAgICAgIHZpZXdDb250YWluZXIuaW5zZXJ0KGNvbXBvbmVudFJlZi5ob3N0VmlldywgMCk7XG4gICAgfVxuXG4gICAgLy8gSW5zZXJ0cyB0aGUgY29tcG9uZW50IGluIHRoZSByb290IGFwcGxpY2F0aW9uIG5vZGUuXG4gICAgcHVibGljIGF0dGFjaFRvQXBwbGljYXRpb248VD4oY29tcG9uZW50UmVmOkNvbXBvbmVudFJlZjxUPik6dm9pZCB7XG4gICAgICAgIHRoaXMuX2FwcGxpY2F0aW9uUmVmLmF0dGFjaFZpZXcoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgICB9XG5cbiAgICAvLyBEZXRhY2hlcyB0aGUgY29tcG9uZW50IGZyb20gdGhlIHJvb3QgYXBwbGljYXRpb24gbm9kZS5cbiAgICBwdWJsaWMgZGV0YWNoRnJvbUFwcGxpY2F0aW9uPFQ+KGNvbXBvbmVudFJlZjpDb21wb25lbnRSZWY8VD4pOnZvaWQge1xuICAgICAgICB0aGlzLl9hcHBsaWNhdGlvblJlZi5kZXRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG4gICAgfVxuXG4gICAgLy8gTW92ZXMgdGhlIGNvbXBvbmVudCB0byB0aGUgc3BlY2lmaWVkIERPTSBlbGVtZW50LlxuICAgIHB1YmxpYyBtb3ZlVG9FbGVtZW50PFQ+KGNvbXBvbmVudFJlZjpDb21wb25lbnRSZWY8VD4sIGVsZW1lbnQ6RWxlbWVudCk6dm9pZCB7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIE1vdmVzIHRoZSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJvZHkuXG4gICAgcHVibGljIG1vdmVUb0RvY3VtZW50Qm9keTxUPihjb21wb25lbnRSZWY6Q29tcG9uZW50UmVmPFQ+KTp2b2lkIHtcbiAgICAgICAgdGhpcy5tb3ZlVG9FbGVtZW50KGNvbXBvbmVudFJlZiwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGV0YWNoRnJvbURvY3VtZW50PFQ+KGNvbXBvbmVudFJlZjpDb21wb25lbnRSZWY8VD4pOnZvaWQge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gY29tcG9uZW50UmVmLmxvY2F0aW9uLm5hdGl2ZUVsZW1lbnQgYXMgRWxlbWVudDtcbiAgICAgICAgLy8gV2UgY2FuJ3QgdXNlIGBlbGVtZW50LnJlbW92ZSgpYCBkdWUgdG8gbGFjayBvZiBJRTExIHN1cHBvcnQuXG4gICAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==