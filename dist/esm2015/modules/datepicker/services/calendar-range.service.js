import { CalendarItem } from "../directives/calendar-item";
import { DateComparer } from "../classes/date-comparer";
import { DateUtil } from "../../../misc/util/helpers/date";
import { Util } from "../../../misc/util/helpers/util";
export class CalendarRange {
    get inRange() {
        return this.items.filter(i => !i.isOutsideRange);
    }
    constructor(start, dates, items, grouped, comparer) {
        this.start = start;
        this.dates = dates;
        this.items = items;
        this.groupedItems = grouped;
        this._comparer = comparer;
    }
    find(item) {
        return this.items.find(i => this._comparer.equal(i.date, item.date));
    }
    findIndex(item) {
        if (!item) {
            return -1;
        }
        return this.items.findIndex(i => this._comparer.equal(i.date, item.date));
    }
    containsDate(date) {
        return !!this.inRange.find(i => this._comparer.equal(i.date, date));
    }
}
export class CalendarRangeService {
    get dateComparer() {
        return new DateComparer(this.marginal, this.service.inFinalView);
    }
    get length() {
        return this.rows * this.columns;
    }
    get canMoveNext() {
        const firstItem = this.next.inRange[0];
        if (firstItem && this.service.maxDate) {
            return firstItem.date <= this.service.maxDate;
        }
        return true;
    }
    get canMovePrevious() {
        const lastItem = this.previous.inRange.slice(-1).pop();
        if (lastItem && this.service.minDate) {
            return lastItem.date >= this.service.minDate;
        }
        return true;
    }
    constructor(interval, rows, columns) {
        this.interval = interval;
        this.marginal = interval + 1;
        this.rows = rows;
        this.columns = columns;
    }
    loadService(service) {
        this.service = service;
        this.refresh();
    }
    refresh() {
        this.current = this.calcRange(this.service.currentDate);
        this.next = this.calcRange(DateUtil.next(this.interval, DateUtil.clone(this.service.currentDate)));
        this.previous = this.calcRange(DateUtil.previous(this.interval, DateUtil.clone(this.service.currentDate)));
    }
    move(forwards) {
        if (forwards) {
            return this.moveNext();
        }
        return this.movePrevious();
    }
    moveNext() {
        DateUtil.next(this.interval, this.service.currentDate);
        this.previous = this.current;
        this.current = this.next;
        this.next = this.calcRange(DateUtil.next(this.interval, DateUtil.clone(this.service.currentDate)));
    }
    movePrevious() {
        DateUtil.previous(this.interval, this.service.currentDate);
        this.next = this.current;
        this.current = this.previous;
        this.previous = this.calcRange(DateUtil.previous(this.interval, DateUtil.clone(this.service.currentDate)));
    }
    calc(forwards) {
        if (forwards) {
            return this.next;
        }
        return this.previous;
    }
    calcRange(startDate) {
        const start = this.calcStart(startDate);
        if (this.service.inFinalView) {
            DateUtil.startOf(this.marginal, start, true);
        }
        const dates = this.calcDates(start);
        const items = this.calcItems(dates, startDate);
        return new CalendarRange(start, dates, items, Util.Array.group(items, this.columns), this.dateComparer);
    }
    calcStart(date) {
        return DateUtil.startOf(this.interval, DateUtil.clone(date));
    }
    calcDates(rangeStart) {
        return Util.Array.range(this.length).map(i => DateUtil.add(this.marginal, DateUtil.clone(rangeStart), i));
    }
    calcItems(dateRange, baseDate) {
        return dateRange.map(date => {
            const item = new CalendarItem(date);
            item.isDisabled = !this.dateComparer.between(item.date, this.service.minDate, this.service.maxDate);
            item.isActive = this.dateComparer.equal(item.date, this.service.selectedDate);
            item.isToday = this.dateComparer.equal(item.date, new Date());
            item.isSelectable = item.isDisabled;
            this.configureItem(item, baseDate);
            return item;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,