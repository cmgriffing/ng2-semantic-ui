import * as tslib_1 from "tslib";
import { Directive, Host, Input, ElementRef, HostBinding, HostListener } from "@angular/core";
import { SuiDatepickerDirective, SuiDatepickerDirectiveValueAccessor } from "./datepicker.directive";
import { InternalDateParser, DateParser } from "../classes/date-parser";
import * as bowser from "bowser";
import "../helpers/is-webview";
import * as isUAWebView from "is-ua-webview";
import { DateUtil } from "../../../misc/util/helpers/date";
import { SuiLocalizationService } from "../../../behaviors/localization/services/localization.service";
import { PopupTrigger } from "../../../modules/popup/classes/popup-config";
const isWebView = isUAWebView["default"] || isUAWebView;
let SuiDatepickerInputDirective = class SuiDatepickerInputDirective {
    constructor(datepicker, valueAccessor, element, _localizationService) {
        this.datepicker = datepicker;
        this.valueAccessor = valueAccessor;
        this.element = element;
        this._localizationService = _localizationService;
        this.useNativeOnMobile = true;
        this.fallbackActive = false;
        // Whenever the datepicker value updates, update the input text alongside it.
        this.datepicker.onSelectedDateChange.subscribe(() => this.updateValue(this.selectedDateString));
        _localizationService.onLanguageUpdate.subscribe(() => this.updateValue(this.selectedDateString));
    }
    get useNativeOnMobile() {
        return this._useNativeOnMobile;
    }
    set useNativeOnMobile(fallback) {
        this._useNativeOnMobile = fallback;
        const isOnMobile = bowser.mobile || bowser.tablet || isWebView(navigator.userAgent);
        this.fallbackActive = this.useNativeOnMobile && isOnMobile;
    }
    get fallbackActive() {
        return this._fallbackActive;
    }
    set fallbackActive(active) {
        this._fallbackActive = active;
        // If the fallback is active, then the trigger must be manual so the datepicker never opens.
        this.datepicker.popup.config.trigger = this.fallbackActive
            ? PopupTrigger.Manual
            : PopupTrigger.Focus;
        // Update the input value (this will insert the `T` as required).
        this.updateValue(this.selectedDateString);
    }
    get parser() {
        if (this.fallbackActive) {
            return new InternalDateParser(this.datepicker.mode, this.datepicker.localeValues);
        }
        return new DateParser(this.datepicker.localeValues.formats[this.datepicker.mode], this.datepicker.localeValues);
    }
    get selectedDateString() {
        if (this.datepicker.selectedDate) {
            return this.parser.format(this.datepicker.selectedDate);
        }
    }
    get type() {
        if (this.fallbackActive) {
            return this.datepicker.config.fallback;
        }
        return "text";
    }
    get max() {
        if (this.fallbackActive && this.datepicker.maxDate) {
            // Since HTML doesn't use a date object max is somewhat tricky.
            // Our Datepicker will always choose the 1st date on the provided precision,
            // meaning anything below the maxDate will work, hence endOf.
            const max = DateUtil.endOf(this.datepicker.config.precision, DateUtil.clone(this.datepicker.maxDate));
            return this.parser.format(max);
        }
    }
    get min() {
        if (this.fallbackActive && this.datepicker.minDate) {
            // Since HTML doesn't use a date object min is somewhat tricky.
            // We use 1 minute before the next date at the configured precision since
            // our Datepicker picks the first available date at that precision.
            const min = DateUtil.clone(this.datepicker.minDate);
            return this.parser.format(min);
        }
    }
    updateValue(value) {
        // Only update the current value if it is different to what it's being updated to.
        // This is so that the editing position isn't changed when manually typing the date.
        if (!this._lastUpdateTyped) {
            this.datepicker.setRendererValue(this.element.nativeElement, value);
        }
        this._lastUpdateTyped = false;
    }
    typeValue(value) {
        this._lastUpdateTyped = true;
        this._currentInputValue = value;
        if (!value) {
            // Delete the selected date if no date was entered manually.
            return this.datepicker.writeValue(undefined);
        }
        const parsed = this.parser.parse(value, this.datepicker.selectedDate);
        if (!isNaN(parsed.getTime()) && value === this.parser.format(parsed)) {
            return this.datepicker.writeValue(parsed);
        }
        return this.datepicker.writeValue(undefined);
    }
    onFocusOut() {
        this.valueAccessor.onTouched();
    }
};
SuiDatepickerInputDirective.ctorParameters = () => [
    { type: SuiDatepickerDirective, decorators: [{ type: Host }] },
    { type: SuiDatepickerDirectiveValueAccessor, decorators: [{ type: Host }] },
    { type: ElementRef },
    { type: SuiLocalizationService }
];
tslib_1.__decorate([
    Input("pickerUseNativeOnMobile")
], SuiDatepickerInputDirective.prototype, "useNativeOnMobile", null);
tslib_1.__decorate([
    HostBinding("attr.type")
], SuiDatepickerInputDirective.prototype, "type", null);
tslib_1.__decorate([
    HostBinding("attr.max")
], SuiDatepickerInputDirective.prototype, "max", null);
tslib_1.__decorate([
    HostBinding("attr.min")
], SuiDatepickerInputDirective.prototype, "min", null);
tslib_1.__decorate([
    HostListener("input", ["$event.target.value"])
], SuiDatepickerInputDirective.prototype, "typeValue", null);
tslib_1.__decorate([
    HostListener("focusout")
], SuiDatepickerInputDirective.prototype, "onFocusOut", null);
SuiDatepickerInputDirective = tslib_1.__decorate([
    Directive({
        selector: "input[suiDatepicker]"
    }),
    tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host())
], SuiDatepickerInputDirective);
export { SuiDatepickerInputDirective };
//# sourceMappingURL=data:application/json;base64,