import { DateFnsParser } from "../helpers/date-fns";
export class DateParser {
    constructor(format, locale) {
        this._format = format;
        this._parser = new DateFnsParser(locale);
    }
    format(date) {
        return this._parser.format(date, this._format);
    }
    parse(dateString, baseDate = new Date()) {
        return this._parser.parse(dateString, this._format, baseDate);
    }
}
export class InternalDateParser extends DateParser {
    constructor(mode, locale) {
        const internalFormats = {
            time: "HH:mm",
            datetime: "YYYY-MM-DDTHH:mm",
            date: "YYYY-MM-DD",
            month: "YYYY-MM",
            year: "YYYY"
        };
        super(internalFormats[mode], locale);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItc2VtYW50aWMtdWkvIiwic291cmNlcyI6WyJtb2R1bGVzL2RhdGVwaWNrZXIvY2xhc3Nlcy9kYXRlLXBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNcEQsTUFBTSxPQUFPLFVBQVU7SUFJbkIsWUFBWSxNQUFhLEVBQUUsTUFBOEI7UUFDckQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sTUFBTSxDQUFDLElBQVM7UUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxLQUFLLENBQUMsVUFBaUIsRUFBRSxXQUFnQixJQUFJLElBQUksRUFBRTtRQUN0RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxVQUFVO0lBQzlDLFlBQVksSUFBbUIsRUFBRSxNQUE4QjtRQUMzRCxNQUFNLGVBQWUsR0FBa0M7WUFDbkQsSUFBSSxFQUFFLE9BQU87WUFDYixRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLElBQUksRUFBRSxZQUFZO1lBQ2xCLEtBQUssRUFBRSxTQUFTO1lBQ2hCLElBQUksRUFBRSxNQUFNO1NBQ2YsQ0FBQztRQUVGLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZXBpY2tlck1vZGUgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9kYXRlcGlja2VyXCI7XG5pbXBvcnQgeyBEYXRlRm5zUGFyc2VyIH0gZnJvbSBcIi4uL2hlbHBlcnMvZGF0ZS1mbnNcIjtcbmltcG9ydCB7XG4gICAgSURhdGVwaWNrZXJMb2NhbGVWYWx1ZXMsXG4gICAgSURhdGVwaWNrZXJGb3JtYXRzTG9jYWxlVmFsdWVzXG59IGZyb20gXCIuLi8uLi8uLi9iZWhhdmlvcnMvbG9jYWxpemF0aW9uL2ludGVyZmFjZXMvZGF0ZXBpY2tlci12YWx1ZXNcIjtcblxuZXhwb3J0IGNsYXNzIERhdGVQYXJzZXIge1xuICAgIHByaXZhdGUgX2Zvcm1hdDpzdHJpbmc7XG4gICAgcHJpdmF0ZSBfcGFyc2VyOkRhdGVGbnNQYXJzZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihmb3JtYXQ6c3RyaW5nLCBsb2NhbGU6SURhdGVwaWNrZXJMb2NhbGVWYWx1ZXMpIHtcbiAgICAgICAgdGhpcy5fZm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICB0aGlzLl9wYXJzZXIgPSBuZXcgRGF0ZUZuc1BhcnNlcihsb2NhbGUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBmb3JtYXQoZGF0ZTpEYXRlKTpzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyc2VyLmZvcm1hdChkYXRlLCB0aGlzLl9mb3JtYXQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwYXJzZShkYXRlU3RyaW5nOnN0cmluZywgYmFzZURhdGU6RGF0ZSA9IG5ldyBEYXRlKCkpOkRhdGUge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyc2VyLnBhcnNlKGRhdGVTdHJpbmcsIHRoaXMuX2Zvcm1hdCwgYmFzZURhdGUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludGVybmFsRGF0ZVBhcnNlciBleHRlbmRzIERhdGVQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKG1vZGU6RGF0ZXBpY2tlck1vZGUsIGxvY2FsZTpJRGF0ZXBpY2tlckxvY2FsZVZhbHVlcykge1xuICAgICAgICBjb25zdCBpbnRlcm5hbEZvcm1hdHM6SURhdGVwaWNrZXJGb3JtYXRzTG9jYWxlVmFsdWVzID0ge1xuICAgICAgICAgICAgdGltZTogXCJISDptbVwiLFxuICAgICAgICAgICAgZGF0ZXRpbWU6IFwiWVlZWS1NTS1ERFRISDptbVwiLFxuICAgICAgICAgICAgZGF0ZTogXCJZWVlZLU1NLUREXCIsXG4gICAgICAgICAgICBtb250aDogXCJZWVlZLU1NXCIsXG4gICAgICAgICAgICB5ZWFyOiBcIllZWVlcIlxuICAgICAgICB9O1xuXG4gICAgICAgIHN1cGVyKGludGVybmFsRm9ybWF0c1ttb2RlXSwgbG9jYWxlKTtcbiAgICB9XG59XG4iXX0=