import { OnInit, ElementRef, Renderer2, EventEmitter, ViewContainerRef, AfterViewInit } from "@angular/core";
import { ModalControls, ModalResult } from "../classes/modal-controls";
import { ModalConfig, ModalSize } from "../classes/modal-config";
import { IDynamicClasses } from "../../../misc/util/helpers/util";
import { SuiComponentFactory } from "../../../misc/util/services/component-factory.service";
import { TransitionController } from "../../../modules/transition/classes/transition-controller";
export declare class SuiModal<T, U> implements OnInit, AfterViewInit {
    protected _renderer: Renderer2;
    private _element;
    private _componentFactory;
    isClosable: boolean;
    closeResult: U;
    controls: ModalControls<T, U>;
    readonly approve: ModalResult<T>;
    readonly deny: ModalResult<U>;
    onApprove: EventEmitter<T>;
    onDeny: EventEmitter<U>;
    onDismiss: EventEmitter<void>;
    modalElement: ElementRef;
    size: ModalSize;
    private _isFullScreen;
    isFullScreen: boolean;
    isBasic: boolean;
    private _mustScroll;
    private _mustAlwaysScroll;
    mustScroll: boolean;
    private _isInverted;
    isInverted: boolean;
    transitionController: TransitionController;
    transition: string;
    transitionDuration: number;
    dimBackground: boolean;
    private _isClosing;
    templateSibling: ViewContainerRef;
    private _originalContainer?;
    readonly dynamicClasses: IDynamicClasses;
    constructor(_renderer: Renderer2, _element: ElementRef, _componentFactory: SuiComponentFactory);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    loadConfig<V>(config: ModalConfig<V, T, U>): void;
    private dismiss;
    close(): void;
    private updateScroll;
    onClick(e: MouseEvent): void;
    onDocumentKeyUp(e: KeyboardEvent): void;
    onDocumentResize(): void;
}
