import * as tslib_1 from "tslib";
import { Input, ViewChildren } from "@angular/core";
import { SuiCalendarItem } from "../directives/calendar-item";
import { KeyCode } from "../../../misc/util/helpers/util";
export var CalendarViewType;
(function (CalendarViewType) {
    CalendarViewType[CalendarViewType["Year"] = 0] = "Year";
    CalendarViewType[CalendarViewType["Month"] = 1] = "Month";
    CalendarViewType[CalendarViewType["Date"] = 2] = "Date";
    CalendarViewType[CalendarViewType["Hour"] = 3] = "Hour";
    CalendarViewType[CalendarViewType["Minute"] = 4] = "Minute";
})(CalendarViewType || (CalendarViewType = {}));
export class CalendarView {
    constructor(_renderer, viewType, ranges) {
        this._renderer = _renderer;
        this._type = viewType;
        this.ranges = ranges;
        this._documentKeyDownListener = _renderer.listen("document", "keydown", (e) => this.onDocumentKeyDown(e));
    }
    set service(service) {
        this._service = service;
        this.ranges.loadService(service);
        this.service.onManualUpdate = () => {
            this.ranges.refresh();
            delete this._highlightedItem;
            this.autoHighlight();
        };
    }
    get service() {
        return this._service;
    }
    get currentDate() {
        return this.service.currentDate;
    }
    get selectedDate() {
        return this.service.selectedDate;
    }
    // Template Methods
    setDate(item) {
        this.service.changeDate(item.date, this._type);
    }
    zoomOut() {
        this.service.zoomOut(this._type);
    }
    // Keyboard Control
    ngAfterViewInit() {
        this._renderedItems.changes.subscribe(() => this.onRenderedItemsChanged());
        this.onRenderedItemsChanged();
    }
    onRenderedItemsChanged() {
        this._renderedItems.forEach(i => i.onFocussed.subscribe((hasFocus) => {
            if (hasFocus) {
                this.highlightItem(i.item);
            }
        }));
        this.autoHighlight();
        this.highlightItem(this._highlightedItem);
    }
    autoHighlight() {
        let date = this.selectedDate &&
            this.ranges.current.containsDate(this.selectedDate)
            ? this.selectedDate
            : this.currentDate;
        if (this._highlightedItem &&
            this.ranges.current.containsDate(this._highlightedItem.date)) {
            date = this._highlightedItem.date;
        }
        const initiallyHighlighted = this.ranges.current.items.find(i => this.ranges.dateComparer.equal(i.date, date));
        if (initiallyHighlighted && !initiallyHighlighted.isDisabled) {
            this._highlightedItem = initiallyHighlighted;
        }
    }
    highlightItem(item) {
        if (item) {
            this._renderedItems.forEach(i => (i.hasFocus = false));
            const rendered = this._renderedItems.find(ri => ri.item === item);
            if (rendered && !rendered.hasFocus) {
                rendered.hasFocus = true;
                rendered.detectChanges();
            }
            this._highlightedItem = item;
        }
    }
    onDocumentKeyDown(e) {
        if (this._highlightedItem && e.keyCode === KeyCode.Enter) {
            this.setDate(this._highlightedItem);
            return;
        }
        if (!this._highlightedItem) {
            this.autoHighlight();
        }
        const index = this.ranges.current.findIndex(this._highlightedItem);
        let isMovingForward = true;
        let delta = 0;
        switch (e.keyCode) {
            case KeyCode.Right:
                delta += 1;
                break;
            case KeyCode.Left:
                delta -= 1;
                isMovingForward = false;
                break;
            case KeyCode.Down:
                delta += this.ranges.columns;
                break;
            case KeyCode.Up:
                delta -= this.ranges.columns;
                isMovingForward = false;
                break;
            default:
                return;
        }
        // Stop these keypresses being captured elsewhere.
        e.preventDefault();
        let nextItem = this.ranges.current.items[index + delta];
        if (nextItem && nextItem.isDisabled) {
            return;
        }
        if (nextItem && !nextItem.isOutsideRange) {
            return this.highlightItem(nextItem);
        }
        if (nextItem && nextItem.isOutsideRange) {
            if (index + delta >= this.ranges.current.inRange.length) {
                isMovingForward = true;
            }
        }
        if (!nextItem) {
            let adjustedIndex = this.ranges.current.findIndex(this._highlightedItem);
            const nextItems = this.ranges.calc(isMovingForward).inRange;
            if (isMovingForward) {
                adjustedIndex -= this.ranges.current.inRange.length;
            }
            else {
                adjustedIndex += nextItems.length;
            }
            nextItem = nextItems[adjustedIndex + delta];
            if (nextItem.isDisabled) {
                return;
            }
        }
        this.ranges.move(isMovingForward);
        this._highlightedItem = this.ranges.current.find(nextItem);
    }
    ngOnDestroy() {
        this._documentKeyDownListener();
    }
}
tslib_1.__decorate([
    ViewChildren(SuiCalendarItem)
], CalendarView.prototype, "_renderedItems", void 0);
tslib_1.__decorate([
    Input()
], CalendarView.prototype, "service", null);
//# sourceMappingURL=data:application/json;base64,