import Popper from "popper.js";
export const PositioningPlacement = {
    Auto: "auto",
    TopLeft: "top left",
    Top: "top",
    TopRight: "top right",
    LeftTop: "left top",
    Left: "left",
    LeftBottom: "left bottom",
    BottomLeft: "bottom left",
    Bottom: "bottom",
    BottomRight: "bottom right",
    RightTop: "right top",
    Right: "right",
    RightBottom: "right bottom"
};
function placementToPopper(placement) {
    if (!placement || placement === PositioningPlacement.Auto) {
        return "auto";
    }
    // All placements of the format: `direction alignment`, e.g. `top left`.
    const [direction, alignment] = placement.split(" ");
    // Direction alone covers case of just `top`, `left`, `bottom`, `right`.
    const chosenPlacement = [direction];
    // Add `start` / `end` to placement, depending on alignment direction.
    switch (alignment) {
        case "top":
        case "left":
            chosenPlacement.push("start");
            break;
        case "bottom":
        case "right":
            chosenPlacement.push("end");
            break;
    }
    // Join with hyphen to create Popper compatible placement.
    return chosenPlacement.join("-");
}
function popperToPlacement(popper) {
    if (!popper || popper === "auto") {
        return "auto";
    }
    const [direction, alignment] = popper.split("-");
    const chosenPlacement = [direction];
    switch (direction) {
        case "top":
        case "bottom":
            switch (alignment) {
                case "start":
                    chosenPlacement.push("left");
                    break;
                case "end":
                    chosenPlacement.push("right");
                    break;
            }
            break;
        case "left":
        case "right":
            switch (alignment) {
                case "start":
                    chosenPlacement.push("top");
                    break;
                case "end":
                    chosenPlacement.push("bottom");
                    break;
            }
            break;
    }
    return chosenPlacement.join(" ");
}
export class PositioningService {
    get placement() {
        return this._placement;
    }
    set placement(placement) {
        this._placement = placement;
        this._popper.options.placement = placementToPopper(placement);
        this.update();
    }
    get actualPlacement() {
        if (!this._popperState) {
            return PositioningPlacement.Auto;
        }
        return popperToPlacement(this._popperState.placement);
    }
    get state() {
        return this._popperState;
    }
    constructor(anchor, subject, placement, arrowSelector) {
        this.anchor = anchor;
        this.subject = subject;
        this._placement = placement;
        const modifiers = {
            computeStyle: {
                gpuAcceleration: false
            },
            preventOverflow: {
                escapeWithReference: true,
                boundariesElement: document.body
            },
            arrow: {
                element: arrowSelector
            }
        };
        if (!arrowSelector) {
            delete modifiers.arrow;
        }
        this._popper = new Popper(anchor.nativeElement, subject.nativeElement, {
            placement: placementToPopper(placement),
            modifiers,
            onCreate: initial => this._popperState = initial,
            onUpdate: update => this._popperState = update
        });
    }
    update() {
        this._popper.update();
    }
    destroy() {
        this._popper.destroy();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb25pbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nMi1zZW1hbnRpYy11aS8iLCJzb3VyY2VzIjpbIm1pc2MvdXRpbC9zZXJ2aWNlcy9wb3NpdGlvbmluZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sTUFBcUQsTUFBTSxXQUFXLENBQUM7QUFtQjlFLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHO0lBQ2hDLElBQUksRUFBRSxNQUE4QjtJQUNwQyxPQUFPLEVBQUUsVUFBa0M7SUFDM0MsR0FBRyxFQUFFLEtBQTZCO0lBQ2xDLFFBQVEsRUFBRSxXQUFtQztJQUM3QyxPQUFPLEVBQUUsVUFBa0M7SUFDM0MsSUFBSSxFQUFFLE1BQThCO0lBQ3BDLFVBQVUsRUFBRSxhQUFxQztJQUNqRCxVQUFVLEVBQUUsYUFBcUM7SUFDakQsTUFBTSxFQUFFLFFBQWdDO0lBQ3hDLFdBQVcsRUFBRSxjQUFzQztJQUNuRCxRQUFRLEVBQUUsV0FBbUM7SUFDN0MsS0FBSyxFQUFFLE9BQStCO0lBQ3RDLFdBQVcsRUFBRSxjQUFzQztDQUN0RCxDQUFDO0FBV0YsU0FBUyxpQkFBaUIsQ0FBQyxTQUE4QjtJQUNyRCxJQUFJLENBQUMsU0FBUyxJQUFJLFNBQVMsS0FBSyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUU7UUFDdkQsT0FBTyxNQUFNLENBQUM7S0FDakI7SUFFRCx3RUFBd0U7SUFDeEUsTUFBTSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBELHdFQUF3RTtJQUN4RSxNQUFNLGVBQWUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXBDLHNFQUFzRTtJQUN0RSxRQUFRLFNBQVMsRUFBRTtRQUNmLEtBQUssS0FBSyxDQUFDO1FBQ1gsS0FBSyxNQUFNO1lBQ1AsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM5QixNQUFNO1FBQ1YsS0FBSyxRQUFRLENBQUM7UUFDZCxLQUFLLE9BQU87WUFDUixlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLE1BQU07S0FDYjtJQUVELDBEQUEwRDtJQUMxRCxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFjLENBQUM7QUFDbEQsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUMsTUFBYTtJQUNwQyxJQUFJLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7UUFDOUIsT0FBTyxNQUFNLENBQUM7S0FDakI7SUFFRCxNQUFNLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFakQsTUFBTSxlQUFlLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUVwQyxRQUFRLFNBQVMsRUFBRTtRQUNmLEtBQUssS0FBSyxDQUFDO1FBQ1gsS0FBSyxRQUFRO1lBQ1QsUUFBUSxTQUFTLEVBQUU7Z0JBQ2YsS0FBSyxPQUFPO29CQUNSLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQzdCLE1BQU07Z0JBQ1YsS0FBSyxLQUFLO29CQUNOLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzlCLE1BQU07YUFDYjtZQUNELE1BQU07UUFDVixLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssT0FBTztZQUNSLFFBQVEsU0FBUyxFQUFFO2dCQUNmLEtBQUssT0FBTztvQkFDUixlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUM1QixNQUFNO2dCQUNWLEtBQUssS0FBSztvQkFDTixlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUMvQixNQUFNO2FBQ2I7WUFDRCxNQUFNO0tBQ2I7SUFFRCxPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUF5QixDQUFDO0FBQzdELENBQUM7QUFFRCxNQUFNLE9BQU8sa0JBQWtCO0lBUTNCLElBQVcsU0FBUztRQUNoQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQVcsU0FBUyxDQUFDLFNBQThCO1FBQy9DLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVELElBQVcsZUFBZTtRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNwQixPQUFPLG9CQUFvQixDQUFDLElBQUksQ0FBQztTQUNwQztRQUVELE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsSUFBVyxLQUFLO1FBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFRCxZQUFZLE1BQWlCLEVBQUUsT0FBa0IsRUFBRSxTQUE4QixFQUFFLGFBQXFCO1FBQ3BHLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBRTVCLE1BQU0sU0FBUyxHQUFtQjtZQUM5QixZQUFZLEVBQUU7Z0JBQ1YsZUFBZSxFQUFFLEtBQUs7YUFDekI7WUFDRCxlQUFlLEVBQUU7Z0JBQ2IsbUJBQW1CLEVBQUUsSUFBSTtnQkFDekIsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLElBQUk7YUFDbkM7WUFDRCxLQUFLLEVBQUU7Z0JBQ0gsT0FBTyxFQUFFLGFBQWE7YUFDekI7U0FDSixDQUFDO1FBRUYsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNoQixPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUM7U0FDMUI7UUFFRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksTUFBTSxDQUNyQixNQUFNLENBQUMsYUFBYSxFQUNwQixPQUFPLENBQUMsYUFBYSxFQUNyQjtZQUNJLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxTQUFTLENBQUM7WUFDdkMsU0FBUztZQUNULFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTztZQUNoRCxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU07U0FDakQsQ0FBbUIsQ0FBQztJQUM3QixDQUFDO0lBRU0sTUFBTTtRQUNULElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVNLE9BQU87UUFDVixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzNCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IFBvcHBlciwgeyBNb2RpZmllcnMsIFBvcHBlck9wdGlvbnMsIFBsYWNlbWVudCwgRGF0YSB9IGZyb20gXCJwb3BwZXIuanNcIjtcblxudHlwZSBQb3BwZXJNb2RpZmllcnMgPSBNb2RpZmllcnMgJiB7XG4gICAgY29tcHV0ZVN0eWxlPzp7XG4gICAgICAgIGdwdUFjY2VsZXJhdGlvbjpib29sZWFuO1xuICAgIH07XG59O1xudHlwZSBQb3BwZXJJbnN0YW5jZSA9IFBvcHBlciAmIHtcbiAgICBvcHRpb25zOlBvcHBlck9wdGlvbnMgJiB7XG4gICAgICAgIG1vZGlmaWVyczpQb3BwZXJNb2RpZmllcnM7XG4gICAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIFBvc2l0aW9uaW5nUGxhY2VtZW50ID0gXCJhdXRvXCIgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRvcCBsZWZ0XCIgfCBcInRvcFwiIHwgXCJ0b3AgcmlnaHRcIiB8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYm90dG9tIGxlZnRcIiB8IFwiYm90dG9tXCIgfCBcImJvdHRvbSByaWdodFwiIHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWZ0IHRvcFwiIHwgXCJsZWZ0XCIgfCBcImxlZnQgYm90dG9tXCIgfFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJpZ2h0IHRvcFwiIHwgXCJyaWdodFwiIHwgXCJyaWdodCBib3R0b21cIjtcblxuZXhwb3J0IGNvbnN0IFBvc2l0aW9uaW5nUGxhY2VtZW50ID0ge1xuICAgIEF1dG86IFwiYXV0b1wiIGFzIFBvc2l0aW9uaW5nUGxhY2VtZW50LFxuICAgIFRvcExlZnQ6IFwidG9wIGxlZnRcIiBhcyBQb3NpdGlvbmluZ1BsYWNlbWVudCxcbiAgICBUb3A6IFwidG9wXCIgYXMgUG9zaXRpb25pbmdQbGFjZW1lbnQsXG4gICAgVG9wUmlnaHQ6IFwidG9wIHJpZ2h0XCIgYXMgUG9zaXRpb25pbmdQbGFjZW1lbnQsXG4gICAgTGVmdFRvcDogXCJsZWZ0IHRvcFwiIGFzIFBvc2l0aW9uaW5nUGxhY2VtZW50LFxuICAgIExlZnQ6IFwibGVmdFwiIGFzIFBvc2l0aW9uaW5nUGxhY2VtZW50LFxuICAgIExlZnRCb3R0b206IFwibGVmdCBib3R0b21cIiBhcyBQb3NpdGlvbmluZ1BsYWNlbWVudCxcbiAgICBCb3R0b21MZWZ0OiBcImJvdHRvbSBsZWZ0XCIgYXMgUG9zaXRpb25pbmdQbGFjZW1lbnQsXG4gICAgQm90dG9tOiBcImJvdHRvbVwiIGFzIFBvc2l0aW9uaW5nUGxhY2VtZW50LFxuICAgIEJvdHRvbVJpZ2h0OiBcImJvdHRvbSByaWdodFwiIGFzIFBvc2l0aW9uaW5nUGxhY2VtZW50LFxuICAgIFJpZ2h0VG9wOiBcInJpZ2h0IHRvcFwiIGFzIFBvc2l0aW9uaW5nUGxhY2VtZW50LFxuICAgIFJpZ2h0OiBcInJpZ2h0XCIgYXMgUG9zaXRpb25pbmdQbGFjZW1lbnQsXG4gICAgUmlnaHRCb3R0b206IFwicmlnaHQgYm90dG9tXCIgYXMgUG9zaXRpb25pbmdQbGFjZW1lbnRcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBvc2l0aW9uQm91bmRpbmdCb3gge1xuICAgIHdpZHRoOm51bWJlcjtcbiAgICBoZWlnaHQ6bnVtYmVyO1xuICAgIHRvcDpudW1iZXI7XG4gICAgbGVmdDpudW1iZXI7XG4gICAgYm90dG9tOm51bWJlcjtcbiAgICByaWdodDpudW1iZXI7XG59XG5cbmZ1bmN0aW9uIHBsYWNlbWVudFRvUG9wcGVyKHBsYWNlbWVudDpQb3NpdGlvbmluZ1BsYWNlbWVudCk6UGxhY2VtZW50IHtcbiAgICBpZiAoIXBsYWNlbWVudCB8fCBwbGFjZW1lbnQgPT09IFBvc2l0aW9uaW5nUGxhY2VtZW50LkF1dG8pIHtcbiAgICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cblxuICAgIC8vIEFsbCBwbGFjZW1lbnRzIG9mIHRoZSBmb3JtYXQ6IGBkaXJlY3Rpb24gYWxpZ25tZW50YCwgZS5nLiBgdG9wIGxlZnRgLlxuICAgIGNvbnN0IFtkaXJlY3Rpb24sIGFsaWdubWVudF0gPSBwbGFjZW1lbnQuc3BsaXQoXCIgXCIpO1xuXG4gICAgLy8gRGlyZWN0aW9uIGFsb25lIGNvdmVycyBjYXNlIG9mIGp1c3QgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAsIGByaWdodGAuXG4gICAgY29uc3QgY2hvc2VuUGxhY2VtZW50ID0gW2RpcmVjdGlvbl07XG5cbiAgICAvLyBBZGQgYHN0YXJ0YCAvIGBlbmRgIHRvIHBsYWNlbWVudCwgZGVwZW5kaW5nIG9uIGFsaWdubWVudCBkaXJlY3Rpb24uXG4gICAgc3dpdGNoIChhbGlnbm1lbnQpIHtcbiAgICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgY2hvc2VuUGxhY2VtZW50LnB1c2goXCJzdGFydFwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYm90dG9tXCI6XG4gICAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICAgICAgY2hvc2VuUGxhY2VtZW50LnB1c2goXCJlbmRcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBKb2luIHdpdGggaHlwaGVuIHRvIGNyZWF0ZSBQb3BwZXIgY29tcGF0aWJsZSBwbGFjZW1lbnQuXG4gICAgcmV0dXJuIGNob3NlblBsYWNlbWVudC5qb2luKFwiLVwiKSBhcyBQbGFjZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHBvcHBlclRvUGxhY2VtZW50KHBvcHBlcjpzdHJpbmcpOlBvc2l0aW9uaW5nUGxhY2VtZW50IHtcbiAgICBpZiAoIXBvcHBlciB8fCBwb3BwZXIgPT09IFwiYXV0b1wiKSB7XG4gICAgICAgIHJldHVybiBcImF1dG9cIjtcbiAgICB9XG5cbiAgICBjb25zdCBbZGlyZWN0aW9uLCBhbGlnbm1lbnRdID0gcG9wcGVyLnNwbGl0KFwiLVwiKTtcblxuICAgIGNvbnN0IGNob3NlblBsYWNlbWVudCA9IFtkaXJlY3Rpb25dO1xuXG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICBjYXNlIFwiYm90dG9tXCI6XG4gICAgICAgICAgICBzd2l0Y2ggKGFsaWdubWVudCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgICAgICAgICAgICAgICBjaG9zZW5QbGFjZW1lbnQucHVzaChcImxlZnRcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2hvc2VuUGxhY2VtZW50LnB1c2goXCJyaWdodFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImxlZnRcIjpcbiAgICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgICBzd2l0Y2ggKGFsaWdubWVudCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgICAgICAgICAgICAgICBjaG9zZW5QbGFjZW1lbnQucHVzaChcInRvcFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgICAgICBjaG9zZW5QbGFjZW1lbnQucHVzaChcImJvdHRvbVwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gY2hvc2VuUGxhY2VtZW50LmpvaW4oXCIgXCIpIGFzIFBvc2l0aW9uaW5nUGxhY2VtZW50O1xufVxuXG5leHBvcnQgY2xhc3MgUG9zaXRpb25pbmdTZXJ2aWNlIHtcbiAgICBwdWJsaWMgcmVhZG9ubHkgYW5jaG9yOkVsZW1lbnRSZWY7XG4gICAgcHVibGljIHJlYWRvbmx5IHN1YmplY3Q6RWxlbWVudFJlZjtcblxuICAgIHByaXZhdGUgX3BvcHBlcjpQb3BwZXJJbnN0YW5jZTtcbiAgICBwcml2YXRlIF9wb3BwZXJTdGF0ZTpEYXRhO1xuICAgIHByaXZhdGUgX3BsYWNlbWVudDpQb3NpdGlvbmluZ1BsYWNlbWVudDtcblxuICAgIHB1YmxpYyBnZXQgcGxhY2VtZW50KCk6UG9zaXRpb25pbmdQbGFjZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGxhY2VtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgcGxhY2VtZW50KHBsYWNlbWVudDpQb3NpdGlvbmluZ1BsYWNlbWVudCkge1xuICAgICAgICB0aGlzLl9wbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICAgIHRoaXMuX3BvcHBlci5vcHRpb25zLnBsYWNlbWVudCA9IHBsYWNlbWVudFRvUG9wcGVyKHBsYWNlbWVudCk7XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBhY3R1YWxQbGFjZW1lbnQoKTpQb3NpdGlvbmluZ1BsYWNlbWVudCB7XG4gICAgICAgIGlmICghdGhpcy5fcG9wcGVyU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBQb3NpdGlvbmluZ1BsYWNlbWVudC5BdXRvO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvcHBlclRvUGxhY2VtZW50KHRoaXMuX3BvcHBlclN0YXRlLnBsYWNlbWVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzdGF0ZSgpOkRhdGEge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9wcGVyU3RhdGU7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoYW5jaG9yOkVsZW1lbnRSZWYsIHN1YmplY3Q6RWxlbWVudFJlZiwgcGxhY2VtZW50OlBvc2l0aW9uaW5nUGxhY2VtZW50LCBhcnJvd1NlbGVjdG9yPzpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5hbmNob3IgPSBhbmNob3I7XG4gICAgICAgIHRoaXMuc3ViamVjdCA9IHN1YmplY3Q7XG4gICAgICAgIHRoaXMuX3BsYWNlbWVudCA9IHBsYWNlbWVudDtcblxuICAgICAgICBjb25zdCBtb2RpZmllcnM6UG9wcGVyTW9kaWZpZXJzID0ge1xuICAgICAgICAgICAgY29tcHV0ZVN0eWxlOiB7XG4gICAgICAgICAgICAgICAgZ3B1QWNjZWxlcmF0aW9uOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzoge1xuICAgICAgICAgICAgICAgIGVzY2FwZVdpdGhSZWZlcmVuY2U6IHRydWUsXG4gICAgICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IGRvY3VtZW50LmJvZHlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhcnJvdzoge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGFycm93U2VsZWN0b3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIWFycm93U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBtb2RpZmllcnMuYXJyb3c7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBuZXcgUG9wcGVyKFxuICAgICAgICAgICAgYW5jaG9yLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICBzdWJqZWN0Lm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnRUb1BvcHBlcihwbGFjZW1lbnQpLFxuICAgICAgICAgICAgICAgIG1vZGlmaWVycyxcbiAgICAgICAgICAgICAgICBvbkNyZWF0ZTogaW5pdGlhbCA9PiB0aGlzLl9wb3BwZXJTdGF0ZSA9IGluaXRpYWwsXG4gICAgICAgICAgICAgICAgb25VcGRhdGU6IHVwZGF0ZSA9PiB0aGlzLl9wb3BwZXJTdGF0ZSA9IHVwZGF0ZVxuICAgICAgICAgICAgfSkgYXMgUG9wcGVySW5zdGFuY2U7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZSgpOnZvaWQge1xuICAgICAgICB0aGlzLl9wb3BwZXIudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRlc3Ryb3koKTp2b2lkIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICB9XG59XG4iXX0=